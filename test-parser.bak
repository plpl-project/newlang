#lang racket

(require rackunit)
(require "lexer.rkt")
(require "parser.rkt")
(require "datatypes.rkt")
(require "boo-lang.rkt")






(define program
      "
       { 
       x = ((list ((a) (3) (9.235))));
       x[98][9][0] = (2);
       {
       a;
       int x = (0);
       if (false) then {
           if ((3) xor (2))
           then
           {/=\\(\"kal\");};
       } else {int y = ((9));};
       };

       char ch = (\"p\");
       
       {a;b;c;};

       list_of list_of int func f (int a, string b, bool e)
       {
           int a = (list((3)(3)(4)));
           a[not(4)];
       };

       while ((string-append (\"a\") (\" bc\")) != (\"a bc\")){
          string-length (\"email: \");
       };
       
       }")

(define simple-program
      "
       { 
       int x = (0);
       int f(){
       return (10);
       }
       (42) - (542);
       void g(int x, bool f){
       x = ((x) + (1));
       }
       }")

(define input (open-input-string simple-program))


;(define p (open-input-string program))

(define AST (full-parser (lex-this my-lexer input)))

(value-of-program AST)


