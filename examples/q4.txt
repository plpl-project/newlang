{

/*              input               */

    list_of string input = (list (("020250112") ("20190418") ("20230928") 
                        ("20241515")("20210101")("20001231")("20250618")));

/*              input ends              */


/*              function definitions              */

    string func num2month(num mm){
        if ((mm) == (1)) then { ("Jan"); }else{
        if ((mm) == (2)) then { ("Feb"); }else{
        if ((mm) == (3)) then { ("Mar"); }else{
        if ((mm) == (4)) then { ("Apr"); }else{  
        if ((mm) == (5)) then { ("May"); }else{
        if ((mm) == (6)) then { ("Jun"); }else{
        if ((mm) == (7)) then { ("Jul"); }else{
        if ((mm) == (8)) then { ("Aug"); }else{
        if ((mm) == (9)) then { ("Sept"); }else{
        if ((mm) == (10)) then { ("Oct"); }else{
        if ((mm) == (11)) then { ("Nov"); }else{
        if ((mm) == (12)) then { ("Dec");    
        }else{
            ("None");
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
    };

    num func char2num(string chr)
    {
        if ((chr) == ("0")) then { (0); }else{   
        if ((chr) == ("1")) then { (1); }else{
        if ((chr) == ("2")) then { (2); }else{
        if ((chr) == ("3")) then { (3); }else{
        if ((chr) == ("4")) then { (4); }else{  
        if ((chr) == ("5")) then { (5); }else{
        if ((chr) == ("6")) then { (6); }else{
        if ((chr) == ("7")) then { (7); }else{
        if ((chr) == ("8")) then { (8); }else{
        if ((chr) == ("9")) then { (9); 
        }else{
            (0);
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
    };

    num func string2num(string str)
    {
        num len = (string-length(str));
        num at = (0);
        num result = (0);
        while ((at) < (len)) 
        {   
            string digit_str = (string-at (str) (at));
            num digit_num = (char2num((digit_str)));
            result = (((result) * (10)) + (digit_num));
            
            at = ((at) + (1));
        };
        (result);
    };

    string func digit2string(num d)
    {
        if ((d) == (0)) then { ("0"); }else{   
        if ((d) == (1)) then { ("1"); }else{
        if ((d) == (2)) then { ("2"); }else{
        if ((d) == (3)) then { ("3"); }else{
        if ((d) == (4)) then { ("4"); }else{  
        if ((d) == (5)) then { ("5"); }else{
        if ((d) == (6)) then { ("6"); }else{
        if ((d) == (7)) then { ("7"); }else{
        if ((d) == (8)) then { ("8"); }else{
        if ((d) == (9)) then { ("9"); 
        }else{
            ("0");
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
    };

    string func num2string(num n) 
    {
        if ((n) == (0)) then {
            "0";
        }else {
            string result = ("");
            while ((n) > (0)) {
                string chr = (digit2string(((n) % (10))));
                result = (string-append (chr) (result));
                n = ((n) // (10));
            };

            result;
        };
    };

    bool func filter_check(string str) 
    {
        if ((string-length (str)) != (8)) then {false;}
        else {
            
            string day = (substring (str) (6) (2)) ;
            string month = (substring (str) (4) (2)) ;
            num day_num = (string2num((day)));
            num month_num = (string2num((month))) ;

            (((day_num) <= (31)) and ((1) <= (day_num))) and
            (((month_num) <= (12)) and ((1) <= (month_num)));
        };
    };
     

    list_of string  func filter(list_of string ls) 
    {
        list_of string filtered = (list ()); 
        
        while (not (is-empty (ls))) {
            string str = (car (ls));
            if (filter_check((str))) then {
                filtered = (append (filtered) (list ((str))));
            }else {filtered;};

            ls = (cdr (ls));
        };
        filtered;
    };


    list_of num func list_string2list_num(list_of string ls)
    {
        list_of num result = (list ());
        while (not (is-empty (ls))) {
            string s = (car (ls));
            num n = (string2num((s)));
            result = (cons (n) (result));

            ls = (cdr (ls));
        };
        result;
    };

    list_of num func sort(list_of num arr){
        num n = (how-long (arr));
        num i = (0);
        num j;

        while ((i) < (n)) {
            j = (0);
            while ((j) < (((n) - (1)) - (i))) {

                num a1 = (arr[j]);
                num a2 = (arr[(j) + (1)]);
                if ((a1) > (a2)) then{
                    arr = (arr[j] = (a2));
                    arr = (arr[((j) + (1))] = (a1));
                    0;}else{0;
                };

                j = ((j) + (1));
            };
            i = ((i) + (1));
        };
        arr;

        
    };

    string func numDate2full(num date){
        num year = ((date) // (10000));
        num month = (((date) // (100)) % (100));
        num day = ((date) % (100));
        string year_str = (num2string((year))) ;
        string month_str = (num2month((month))) ;
        string day_str = (num2string((day))) ;
        if ((day) < (10)) then {
            day_str = (string-append ("0") (day_str));
        }else {day_str;};

        string result = (" of ");
        result = (string-append (day_str) (result));
        result = (string-append (" ") (result));
        result = (string-append (month_str) (result));
        result = (string-append (result) (year_str));
    };

    list_of string func numDateList2full(list_of num arr){
        list_of string result = (list ());
        while (not (is-empty (arr))){
            num date = (car (arr));
            string dateStr = (numDate2full((date)));
            result = (append (result) (list ((dateStr))));
            arr = (cdr (arr));
        };
        result;
    };

/*              function definitions ends              */



/*              main              */

    list_of string filtered = (filter((input)));
    list_of num numed = (list_string2list_num((filtered)));
    list_of num sorted = (sort((numed)));


    list_of string result = (numDateList2full((sorted)));

/*              main ends             */




/*              output              */

    /=\("["); 

    num i = (0);
    while ((i) < (how-long (result))){
        /=\(result[i]);
        i = ((i) + (1));
    };

    /=\("]"); 

    result;


/*              output ends              */

}