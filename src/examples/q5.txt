{
    /* CHANGE THE INPUT HERE */
    num year = (400);
    list_of list_of string data = (list ((list (("99111111") ("person0") ("test0") ("18.98") ("403111111")))
                                         (list (("400111111") ("person1") ("test1") ("18.12") ("401111111")))
                                         (list (("400222222") ("person2") ("test2") ("19") ("402222222")))
                                         (list (("401111111") ("person3") ("test3") ("16.55") ("402111111")))
                                         (list (("402111111") ("person4") ("test4") ("19.72") ("")))
                                         (list (("402222222") ("person5") ("test5") ("17.29") ("")))
                                         (list (("403111111") ("person6") ("test6") ("14.84") ("")))));

    num func char2num(string chr)
    {
        if ((chr) == ("0")) then { (0); }else{   
        if ((chr) == ("1")) then { (1); }else{
        if ((chr) == ("2")) then { (2); }else{
        if ((chr) == ("3")) then { (3); }else{
        if ((chr) == ("4")) then { (4); }else{  
        if ((chr) == ("5")) then { (5); }else{
        if ((chr) == ("6")) then { (6); }else{
        if ((chr) == ("7")) then { (7); }else{
        if ((chr) == ("8")) then { (8); }else{
        if ((chr) == ("9")) then { (9); 
        }else{
            (0);
            };
            };
            };
            };
            };
            };
            };
            };
            };
            };
    };

    num func string2num(string str)
    {
        num len = (string-length(str));
        num at = (0);
        num result = (0);
        while ((at) < (len)) 
        {   
            string digit_str = (string-at (str) (at));
            num digit_num = (char2num((digit_str)));
            result = (((result) * (10)) + (digit_num));
            
            at = ((at) + (1));
        };
        (result);
    };

    num func get_index_by_id(string id, list_of list_of string data)
    {
        num i = (0);
        num len = (how-long(data));
        num index = (0);
    
        while ((i) < (len))
        {
            if ((data[i][0]) == (id)) then
            {
                index = (i);
            }
            else
            {
                (index);
            };

            i = ((i) + (1));
        };

        (index);
    };

    num func get_average_by_id(string id, list_of list_of string data)
    {
        (string2num((data[((get_index_by_id((id) (data))))][3])));
    };

    num func get_average_mentees(num index, list_of list_of string data, num sum_so_far, num count_so_far)
    {
        if ((data[index][4]) == ("")) then
        {
            ((sum_so_far) / (count_so_far));
        }
        else
        {
            num direct = (get_average_by_id((data[index][4]) (data)));
            num next_index = (get_index_by_id((data[index][4]) (data)));
            (get_average_mentees((next_index) (data) ((sum_so_far) + (direct)) ((count_so_far) + (1))));
        };
    };

    num max_avg = (0);
    num new_avg;
    string max_person_name;
    num i = (0);
    num len = (how-long(data));
    num std_year;
    num std_avg;

    while ((i) < (len))
    {
        std_year = (string2num((substring (data[i][0]) (0) ((string-length (data[i][0])) - (6)))));
        if ((std_year) == (year)) then
        {
            new_avg = (get_average_mentees((i) (data) (0) (0)));
            if ((new_avg) > (max_avg)) then
            {
                max_avg = (new_avg);
                max_person_name = (string-append (string-append (data[i][1]) (" ")) (data[i][2]));
                (max_avg);
            }
            else
            {
                (max_avg);
            };
        }
        else
        {
            (max_avg);
        };

        i = ((i) + (1));
    };

    /=\ (max_person_name);
}